export const COL_FMT = {
  RGB: "RGB",
  GBR: "GBR",
  YUV: "YUV",
  BW: "BW",
};

function defineMode(base) {
  return base;
}

export const M1 = defineMode({
  NAME: "Martin 1",
  COLOR: COL_FMT.GBR,
  LINE_WIDTH: 320,
  LINE_COUNT: 256,
  SCAN_TIME: 0.146432,
  SYNC_PULSE: 0.004862,
  SYNC_PORCH: 0.000572,
  SEP_PULSE: 0.000572,
  CHAN_COUNT: 3,
  CHAN_SYNC: 0,
  CHAN_OFFSETS: [],
  HAS_START_SYNC: false,
  HAS_HALF_SCAN: false,
  HAS_ALT_SCAN: false,
});
M1.CHAN_TIME = M1.SEP_PULSE + M1.SCAN_TIME;
M1.CHAN_OFFSETS = [M1.SYNC_PULSE + M1.SYNC_PORCH];
M1.CHAN_OFFSETS.push(M1.CHAN_OFFSETS[0] + M1.CHAN_TIME);
M1.CHAN_OFFSETS.push(M1.CHAN_OFFSETS[1] + M1.CHAN_TIME);
M1.LINE_TIME = M1.SYNC_PULSE + M1.SYNC_PORCH + 3 * M1.CHAN_TIME;
M1.PIXEL_TIME = M1.SCAN_TIME / M1.LINE_WIDTH;
M1.WINDOW_FACTOR = 2.34;

export const M2 = defineMode({ ...M1, NAME: "Martin 2" });
M2.SCAN_TIME = 0.073216;
M2.CHAN_TIME = M2.SEP_PULSE + M2.SCAN_TIME;
M2.CHAN_OFFSETS = [M2.SYNC_PULSE + M2.SYNC_PORCH];
M2.CHAN_OFFSETS.push(M2.CHAN_OFFSETS[0] + M2.CHAN_TIME);
M2.CHAN_OFFSETS.push(M2.CHAN_OFFSETS[1] + M2.CHAN_TIME);
M2.LINE_TIME = M2.SYNC_PULSE + M2.SYNC_PORCH + 3 * M2.CHAN_TIME;
M2.PIXEL_TIME = M2.SCAN_TIME / M2.LINE_WIDTH;
M2.WINDOW_FACTOR = 4.68;

export const S1 = defineMode({
  NAME: "Scottie 1",
  COLOR: COL_FMT.GBR,
  LINE_WIDTH: 320,
  LINE_COUNT: 256,
  SCAN_TIME: 0.13824,
  SYNC_PULSE: 0.009,
  SYNC_PORCH: 0.0015,
  SEP_PULSE: 0.0015,
  CHAN_COUNT: 3,
  CHAN_SYNC: 2,
  CHAN_OFFSETS: [],
  HAS_START_SYNC: true,
  HAS_HALF_SCAN: false,
  HAS_ALT_SCAN: false,
});
S1.CHAN_TIME = S1.SEP_PULSE + S1.SCAN_TIME;
S1.CHAN_OFFSETS = [S1.SYNC_PULSE + S1.SYNC_PORCH + S1.CHAN_TIME];
S1.CHAN_OFFSETS.push(S1.CHAN_OFFSETS[0] + S1.CHAN_TIME);
S1.CHAN_OFFSETS.push(S1.SYNC_PULSE + S1.SYNC_PORCH);
S1.LINE_TIME = S1.SYNC_PULSE + 3 * S1.CHAN_TIME;
S1.PIXEL_TIME = S1.SCAN_TIME / S1.LINE_WIDTH;
S1.WINDOW_FACTOR = 2.48;

export const S2 = defineMode({ ...S1, NAME: "Scottie 2" });
S2.SCAN_TIME = 0.088064;
S2.CHAN_TIME = S2.SEP_PULSE + S2.SCAN_TIME;
S2.CHAN_OFFSETS = [S2.SYNC_PULSE + S2.SYNC_PORCH + S2.CHAN_TIME];
S2.CHAN_OFFSETS.push(S2.CHAN_OFFSETS[0] + S2.CHAN_TIME);
S2.CHAN_OFFSETS.push(S2.SYNC_PULSE + S2.SYNC_PORCH);
S2.LINE_TIME = S2.SYNC_PULSE + 3 * S2.CHAN_TIME;
S2.PIXEL_TIME = S2.SCAN_TIME / S2.LINE_WIDTH;
S2.WINDOW_FACTOR = 3.82;

export const SDX = defineMode({ ...S2, NAME: "Scottie DX" });
SDX.SCAN_TIME = 0.3456;
SDX.CHAN_TIME = SDX.SEP_PULSE + SDX.SCAN_TIME;
SDX.CHAN_OFFSETS = [SDX.SYNC_PULSE + SDX.SYNC_PORCH + SDX.CHAN_TIME];
SDX.CHAN_OFFSETS.push(SDX.CHAN_OFFSETS[0] + SDX.CHAN_TIME);
SDX.CHAN_OFFSETS.push(SDX.SYNC_PULSE + SDX.SYNC_PORCH);
SDX.LINE_TIME = SDX.SYNC_PULSE + 3 * SDX.CHAN_TIME;
SDX.PIXEL_TIME = SDX.SCAN_TIME / SDX.LINE_WIDTH;
SDX.WINDOW_FACTOR = 0.98;

export const R36 = defineMode({
  NAME: "Robot 36",
  COLOR: COL_FMT.YUV,
  LINE_WIDTH: 320,
  LINE_COUNT: 240,
  SCAN_TIME: 0.088,
  HALF_SCAN_TIME: 0.044,
  SYNC_PULSE: 0.009,
  SYNC_PORCH: 0.003,
  SEP_PULSE: 0.0045,
  SEP_PORCH: 0.0015,
  CHAN_COUNT: 2,
  CHAN_SYNC: 0,
  CHAN_OFFSETS: [],
  HAS_START_SYNC: false,
  HAS_HALF_SCAN: true,
  HAS_ALT_SCAN: true,
});
R36.CHAN_TIME = R36.SEP_PULSE + R36.SCAN_TIME;
R36.CHAN_OFFSETS = [R36.SYNC_PULSE + R36.SYNC_PORCH];
R36.CHAN_OFFSETS.push(R36.CHAN_OFFSETS[0] + R36.CHAN_TIME + R36.SEP_PORCH);
R36.LINE_TIME = R36.CHAN_OFFSETS[1] + R36.HALF_SCAN_TIME;
R36.PIXEL_TIME = R36.SCAN_TIME / R36.LINE_WIDTH;
R36.HALF_PIXEL_TIME = R36.HALF_SCAN_TIME / R36.LINE_WIDTH;
R36.WINDOW_FACTOR = 7.7;

export const R72 = defineMode({ ...R36, NAME: "Robot 72" });
R72.SCAN_TIME = 0.138;
R72.HALF_SCAN_TIME = 0.069;
R72.CHAN_COUNT = 3;
R72.CHAN_TIME = R72.SEP_PULSE + R72.SCAN_TIME;
R72.HALF_CHAN_TIME = R72.SEP_PULSE + R72.HALF_SCAN_TIME;
R72.CHAN_OFFSETS = [R72.SYNC_PULSE + R72.SYNC_PORCH];
R72.CHAN_OFFSETS.push(R72.CHAN_OFFSETS[0] + R72.CHAN_TIME + R72.SEP_PORCH);
R72.CHAN_OFFSETS.push(R72.CHAN_OFFSETS[1] + R72.HALF_CHAN_TIME + R72.SEP_PORCH);
R72.LINE_TIME = R72.CHAN_OFFSETS[2] + R72.HALF_SCAN_TIME;
R72.PIXEL_TIME = R72.SCAN_TIME / R72.LINE_WIDTH;
R72.HALF_PIXEL_TIME = R72.HALF_SCAN_TIME / R72.LINE_WIDTH;
R72.WINDOW_FACTOR = 4.88;
R72.HAS_ALT_SCAN = false;

export const VIS_MAP = {
  8: R36,
  12: R72,
  40: M2,
  44: M1,
  56: S2,
  60: S1,
  76: SDX,
};

export const BREAK_OFFSET = 0.3;
export const LEADER_OFFSET = 0.01 + BREAK_OFFSET;
export const VIS_START_OFFSET = 0.3 + LEADER_OFFSET;
export const HDR_SIZE = 0.03 + VIS_START_OFFSET;
export const HDR_WINDOW_SIZE = 0.01;
export const VIS_BIT_SIZE = 0.03;
